{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/user/Desktop/React Apps/twitchClone/client/src/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      // input is destructured from formprops object\n      console.log(meta);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n          className: \"form-control\",\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.renderErr(meta)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 4\n      }, this);\n    };\n\n    this.onSubmit = formValues => {\n      console.log(formValues);\n      this.validate(formValues);\n    };\n  }\n\n  renderErr({\n    touched,\n    error\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 11\n      }, this);\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"container \",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"title\",\n        label: \"Enter the title\",\n        component: this.renderInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"description\",\n        label: \"Enter the description\",\n        component: this.renderInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must  enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter the description of the stream';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);","map":{"version":3,"sources":["/Users/user/Desktop/React Apps/twitchClone/client/src/streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","Component","renderInput","input","label","meta","console","log","renderErr","onSubmit","formValues","validate","touched","error","render","props","handleSubmit","errors","title","description","form"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAQ1CC,WAR0C,GAQ5B,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACzC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,0BACC;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACC;AAAA,oBAAQD;AAAR;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC,sBAAWD,KAAX;AAAkB,UAAA,SAAS,EAAC,cAA5B;AAA2C,UAAA,YAAY,EAAC;AAAxD;AAAA;AAAA;AAAA;AAAA,gBAFD,eAGC;AAAA,oBAAM,KAAKK,SAAL,CAAeH,IAAf;AAAN;AAAA;AAAA;AAAA;AAAA,gBAHD;AAAA;AAAA;AAAA;AAAA;AAAA,cADD;AAOA,KAlByC;;AAAA,SAmB1CI,QAnB0C,GAmB/BC,UAAU,IAAI;AACxBJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,UAAZ;AACA,WAAKC,QAAL,CAAcD,UAAd;AACA,KAtByC;AAAA;;AAC1CF,EAAAA,SAAS,CAAC;AAAEI,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,EAAqB;AAC7B,QAAID,OAAO,IAAIC,KAAf,EAAsB;AACrB,0BAAO;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,kBAA+BA;AAA/B;AAAA;AAAA;AAAA;AAAA,cAAP;AACA,KAFD,MAEO;AACN,aAAO,IAAP;AACA;AACD;;AAiBDC,EAAAA,MAAM,GAAG;AACR,wBACC;AACC,MAAA,SAAS,EAAC,YADX;AAEC,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKP,QAA7B,CAFX;AAAA,8BAGC,QAAC,KAAD;AACC,QAAA,IAAI,EAAC,OADN;AAEC,QAAA,KAAK,EAAC,iBAFP;AAGC,QAAA,SAAS,EAAE,KAAKP;AAHjB;AAAA;AAAA;AAAA;AAAA,cAHD,eASC,QAAC,KAAD;AACC,QAAA,IAAI,EAAC,aADN;AAEC,QAAA,KAAK,EAAC,uBAFP;AAGC,QAAA,SAAS,EAAE,KAAKA;AAHjB;AAAA;AAAA;AAAA;AAAA,cATD,eAcC;AAAQ,QAAA,SAAS,EAAC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAkBA;;AA3CyC;;AA6C3C,MAAMS,QAAQ,GAAGD,UAAU,IAAI;AAC9B,QAAMO,MAAM,GAAG,EAAf;;AACA,MAAI,CAACP,UAAU,CAACQ,KAAhB,EAAuB;AACtBD,IAAAA,MAAM,CAACC,KAAP,GAAe,yBAAf;AACA;;AACD,MAAI,CAACR,UAAU,CAACS,WAAhB,EAA6B;AAC5BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8CAArB;AACA;;AAED,SAAOF,MAAP;AACA,CAVD;;AAWA,eAAelB,SAAS,CAAC;AACxBqB,EAAAA,IAAI,EAAE,cADkB;AAExBT,EAAAA;AAFwB,CAAD,CAAT,CAGZX,YAHY,CAAf","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n\trenderErr({ touched, error }) {\n\t\tif (touched && error) {\n\t\t\treturn <div className='alert danger'>{error}</div>;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\trenderInput = ({ input, label, meta }) => {\n\t\t// input is destructured from formprops object\n\t\tconsole.log(meta);\n\t\treturn (\n\t\t\t<div className='form-group'>\n\t\t\t\t<label>{label}</label>\n\t\t\t\t<input {...input} className='form-control' autoComplete='off' />\n\t\t\t\t<div>{this.renderErr(meta)}</div>\n\t\t\t</div>\n\t\t);\n\t};\n\tonSubmit = formValues => {\n\t\tconsole.log(formValues);\n\t\tthis.validate(formValues);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<form\n\t\t\t\tclassName='container '\n\t\t\t\tonSubmit={this.props.handleSubmit(this.onSubmit)}>\n\t\t\t\t<Field\n\t\t\t\t\tname='title'\n\t\t\t\t\tlabel='Enter the title'\n\t\t\t\t\tcomponent={this.renderInput}\n\t\t\t\t/>\n\n\t\t\t\t<Field\n\t\t\t\t\tname='description'\n\t\t\t\t\tlabel='Enter the description'\n\t\t\t\t\tcomponent={this.renderInput}\n\t\t\t\t/>\n\t\t\t\t<button className='btn btn-primary'>Submit</button>\n\t\t\t</form>\n\t\t);\n\t}\n}\nconst validate = formValues => {\n\tconst errors = {};\n\tif (!formValues.title) {\n\t\terrors.title = 'You must  enter a title';\n\t}\n\tif (!formValues.description) {\n\t\terrors.description = 'You must enter the description of the stream';\n\t}\n\n\treturn errors;\n};\nexport default reduxForm({\n\tform: 'streamCreate',\n\tvalidate,\n})(StreamCreate);\n"]},"metadata":{},"sourceType":"module"}