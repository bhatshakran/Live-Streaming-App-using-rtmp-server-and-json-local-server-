{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nmodule.exports = Readable;\nReadable.ReadableState = ReadableState;\n\nvar Stream = require('stream');\n\nvar util = require('util');\n\nvar StringDecoder;\nutil.inherits(Readable, Stream);\n\nfunction ReadableState(options, stream) {\n  options = options || {}; // the argument passed to this._read(n,cb)\n\n  this.bufferSize = options.bufferSize || 16 * 1024; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  var hwm = options.highWaterMark;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : 16 * 1024; // the minimum number of bytes to buffer before emitting 'readable'\n  // default to pushing everything out as fast as possible.\n\n  this.lowWaterMark = options.lowWaterMark || 0; // cast to ints.\n\n  this.bufferSize = ~~this.bufferSize;\n  this.lowWaterMark = ~~this.lowWaterMark;\n  this.highWaterMark = ~~this.highWaterMark;\n  if (this.lowWaterMark > this.highWaterMark) throw new Error('lowWaterMark cannot be higher than highWaterMark');\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = false;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n  this.sync = false;\n\n  this.onread = function (er, data) {\n    onread(stream, er, data);\n  }; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n\n  this.needReadable = false;\n  this.emittedReadable = false; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode; // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n\n  this.ranOut = false; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0;\n  this.pipeChunkSize = null;\n  this.decoder = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n  }\n}\n\nfunction Readable(options) {\n  if (!(this instanceof Readable)) return new Readable(options);\n  this._readableState = new ReadableState(options, this); // legacy\n\n  this.readable = true;\n  Stream.call(this);\n} // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk) {\n  var rs = this._readableState;\n  rs.onread(null, chunk); // if it's past the high water mark, we can push in some more.\n  // Also, if it's still within the lowWaterMark, we can stand some\n  // more bytes.  This is to work around cases where hwm=0 and\n  // lwm=0, such as the repl.  Also, if the push() triggered a\n  // readable event, and the user called read(largeNumber) such that\n  // needReadable was set, then we ought to push more, so that another\n  // 'readable' event will be triggered.\n\n  return rs.needReadable || rs.length < rs.highWaterMark || rs.length <= rs.lowWaterMark;\n}; // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n};\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return n === 0 ? 0 : 1;\n  if (isNaN(n) || n === null) return state.length;\n  if (n <= 0) return 0; // don't have that much.  return null, unless we've ended.\n\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else return state.length;\n  }\n\n  return n;\n} // you can override either this method, or _read(n, cb) below.\n\n\nReadable.prototype.read = function (n) {\n  var state = this._readableState;\n  var nOrig = n;\n  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable; // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length - n <= state.highWaterMark) doRead = true; // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n  if (state.ended || state.reading) doRead = false;\n\n  if (doRead) {\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.bufferSize, state.onread);\n\n    state.sync = false;\n  } // If _read called its callback synchronously, then `reading`\n  // will be false, and we need to re-evaluate how much data we\n  // can return to the user.\n\n\n  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null || !state.objectMode && ret.length === 0) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n; // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n\n  if (state.length === 0 && !state.ended) state.needReadable = true; // If we happened to read() exactly the remaining amount in the\n  // buffer, and the EOF has been seen at this point, then make sure\n  // that we emit 'end' on the very next tick.\n\n  if (state.ended && !state.endEmitted && state.length === 0) endReadable(this);\n  return ret;\n};\n\nfunction onread(stream, er, chunk) {\n  var state = stream._readableState;\n  var sync = state.sync; // If we get something that is not a buffer, string, null, or undefined,\n  // then switch into objectMode.  Now stream chunks are all considered\n  // to be of length=1, and the watermarks determine how many objects to\n  // keep in the buffer, rather than how many bytes or characters.\n\n  if (!Buffer.isBuffer(chunk) && 'string' !== typeof chunk && chunk !== null && chunk !== undefined) {\n    state.objectMode = true;\n    state.length = state.buffer.length;\n    state.decoder = null;\n  }\n\n  state.reading = false;\n  if (er) return stream.emit('error', er);\n\n  if (chunk === null || chunk === undefined) {\n    // eof\n    state.ended = true;\n\n    if (state.decoder) {\n      chunk = state.decoder.end();\n\n      if (chunk && chunk.length) {\n        state.buffer.push(chunk);\n        state.length += state.objectMode ? 1 : chunk.length;\n      }\n    } // if we've ended and we have some data left, then emit\n    // 'readable' now to make sure it gets picked up.\n\n\n    if (state.length > 0) emitReadable(stream);else endReadable(stream);\n    return;\n  } // at this point, if we got a zero-length buffer or string,\n  // and we're not in object-mode, then there's really no point\n  // continuing.  it means that there is nothing to read right\n  // now, but as we have not received the EOF-signaling null,\n  // we're not ended.  we've already unset the reading flag,\n  // so just get out of here.\n\n\n  if (!state.objectMode && (chunk || typeof chunk === 'string') && 0 === chunk.length) return;\n  if (state.decoder) chunk = state.decoder.write(chunk); // update the buffer info.\n\n  state.length += state.objectMode ? 1 : chunk.length;\n  state.buffer.push(chunk); // if we haven't gotten enough to pass the lowWaterMark,\n  // and we haven't ended, then don't bother telling the user\n  // that it's time to read more data.  Otherwise, emitting 'readable'\n  // probably will trigger another stream.read(), which can trigger\n  // another _read(n,cb) before this one returns!\n\n  if (state.length <= state.lowWaterMark) {\n    state.reading = true;\n\n    stream._read(state.bufferSize, state.onread);\n\n    return;\n  } // Don't emit readable right away in sync mode, because this can trigger\n  // another read() call => stack overflow.  This way, it might trigger\n  // a nextTick recursion warning, but that's not so bad.\n\n\n  if (state.needReadable) {\n    if (!sync) emitReadable(stream);else process.nextTick(function () {\n      emitReadable(stream);\n    });\n  }\n}\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (state.emittedReadable) return;\n  state.emittedReadable = true;\n  stream.emit('readable');\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n, cb) {\n  process.nextTick(function () {\n    cb(new Error('not implemented'));\n  });\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n\n  if ((!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr) {\n    src.once('end', onend);\n  } else {\n    src.once('end', cleanup);\n  }\n\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable) {\n    if (readable !== src) return;\n    cleanup();\n  }\n\n  if (pipeOpts && pipeOpts.chunkSize) state.pipeChunkSize = pipeOpts.chunkSize;\n\n  function onend() {\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  function cleanup() {\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup); // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (!dest._writableState || dest._writableState.needDrain) ondrain();\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    unpipe();\n    if (dest.listeners('error').length === 0) dest.emit('error', er);\n  }\n\n  dest.once('error', onerror); // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    // the handler that waits for readable events after all\n    // the data gets sucked out in flow.\n    // This would be easier to follow with a .once() handler\n    // in flow(), but that is too slow.\n    this.on('readable', pipeOnReadable);\n    state.flowing = true;\n    process.nextTick(function () {\n      flow(src);\n    });\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var dest = this;\n    var state = src._readableState;\n    state.awaitDrain--;\n    if (state.awaitDrain === 0) flow(src);\n  };\n}\n\nfunction flow(src) {\n  var state = src._readableState;\n  var chunk;\n  state.awaitDrain = 0;\n\n  function write(dest, i, list) {\n    var written = dest.write(chunk);\n\n    if (false === written) {\n      state.awaitDrain++;\n    }\n  }\n\n  while (state.pipesCount && null !== (chunk = src.read(state.pipeChunkSize))) {\n    if (state.pipesCount === 1) write(state.pipes, 0, null);else state.pipes.forEach(write);\n    src.emit('data', chunk); // if anyone needs a drain, then we have to wait for that.\n\n    if (state.awaitDrain > 0) return;\n  } // if every destination was unpiped, either before entering this\n  // function, or in the while loop, then stop flowing.\n  //\n  // NB: This is a pretty rare edge case.\n\n\n  if (state.pipesCount === 0) {\n    state.flowing = false; // if there were data event listeners added, then switch to old mode.\n\n    if (src.listeners('data').length) emitDataEvents(src);\n    return;\n  } // at this point, no one needed a drain, so we just ran out of data\n  // on the next readable event, start it over again.\n\n\n  state.ranOut = true;\n}\n\nfunction pipeOnReadable() {\n  if (this._readableState.ranOut) {\n    this._readableState.ranOut = false;\n    flow(this);\n  }\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    this.removeListener('readable', pipeOnReadable);\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    this.removeListener('readable', pipeOnReadable);\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this);\n\n    return this;\n  } // try to find the right one.\n\n\n  var i = state.pipes.indexOf(dest);\n  if (i === -1) return this;\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this);\n  return this;\n}; // kludge for on('data', fn) consumers.  Sad.\n// This is *not* part of the new readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn); // https://github.com/isaacs/readable-stream/issues/16\n  // if we're already flowing, then no need to set up data events.\n\n  if (ev === 'data' && !this._readableState.flowing) emitDataEvents(this);\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on; // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\nReadable.prototype.resume = function () {\n  emitDataEvents(this);\n  this.read(0);\n  this.emit('resume');\n};\n\nReadable.prototype.pause = function () {\n  emitDataEvents(this, true);\n  this.emit('pause');\n};\n\nfunction emitDataEvents(stream, startPaused) {\n  var state = stream._readableState;\n\n  if (state.flowing) {\n    // https://github.com/isaacs/readable-stream/issues/16\n    throw new Error('Cannot switch to old mode now.');\n  }\n\n  var paused = startPaused || false;\n  var readable = false; // convert to an old-style stream.\n\n  stream.readable = true;\n  stream.pipe = Stream.prototype.pipe;\n  stream.on = stream.addListener = Stream.prototype.on;\n  stream.on('readable', function () {\n    readable = true;\n    var c;\n\n    while (!paused && null !== (c = stream.read())) stream.emit('data', c);\n\n    if (c === null) {\n      readable = false;\n      stream._readableState.needReadable = true;\n    }\n  });\n\n  stream.pause = function () {\n    paused = true;\n    this.emit('pause');\n  };\n\n  stream.resume = function () {\n    paused = false;\n    if (readable) process.nextTick(function () {\n      stream.emit('readable');\n    });else this.read(0);\n    this.emit('resume');\n  }; // now make it start, just in case it hadn't already.\n\n\n  stream.emit('readable');\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n  var self = this;\n  stream.on('end', function () {\n    state.ended = true;\n\n    if (state.decoder) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n  stream.on('data', function (chunk) {\n    if (state.decoder) chunk = state.decoder.write(chunk);\n    if (!chunk || !chunk.length) return;\n    var ret = self.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (typeof stream[i] === 'function' && typeof this[i] === 'undefined') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  events.forEach(function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  }); // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n  self._read = function (n, cb) {\n    if (paused) {\n      stream.resume();\n      paused = false;\n    }\n  };\n}; // exposed for testing purposes only.\n\n\nReadable._fromList = fromList; // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret; // nothing in the list, definitely empty.\n\n  if (list.length === 0) return null;\n  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode) ret = list.join('');else ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode) ret = '';else ret = new Buffer(n);\n      var c = 0;\n\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);\n        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();\n        c += cpy;\n      }\n    }\n  }\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState; // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n\n  if (state.length > 0) throw new Error('endReadable called on non-empty stream');\n  if (state.endEmitted) return;\n  state.ended = true;\n  state.endEmitted = true;\n  process.nextTick(function () {\n    stream.readable = false;\n    stream.emit('end');\n  });\n}","map":{"version":3,"sources":["/Users/user/Desktop/React Apps/twitchClone/client/node_modules/flv/node_modules/readable-stream/lib/_stream_readable.js"],"names":["module","exports","Readable","ReadableState","Stream","require","util","StringDecoder","inherits","options","stream","bufferSize","hwm","highWaterMark","lowWaterMark","Error","buffer","length","pipes","pipesCount","flowing","ended","endEmitted","reading","sync","onread","er","data","needReadable","emittedReadable","objectMode","ranOut","awaitDrain","pipeChunkSize","decoder","encoding","_readableState","readable","call","prototype","push","chunk","rs","setEncoding","enc","howMuchToRead","n","state","isNaN","read","nOrig","endReadable","doRead","_read","ret","fromList","Buffer","isBuffer","undefined","emit","end","emitReadable","write","process","nextTick","cb","pipe","dest","pipeOpts","src","stdout","stderr","once","onend","cleanup","on","onunpipe","chunkSize","ondrain","pipeOnDrain","removeListener","onclose","onfinish","onerror","_writableState","needDrain","unpipe","listeners","pipeOnReadable","flow","i","list","written","forEach","emitDataEvents","dests","len","indexOf","splice","ev","fn","res","addListener","resume","pause","startPaused","paused","c","wrap","self","method","apply","arguments","events","bind","_fromList","stringMode","shift","join","concat","buf","slice","l","cpy","Math","min","copy"],"mappings":"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","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Readable;\nReadable.ReadableState = ReadableState;\n\nvar Stream = require('stream');\nvar util = require('util');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nfunction ReadableState(options, stream) {\n  options = options || {};\n\n  // the argument passed to this._read(n,cb)\n  this.bufferSize = options.bufferSize || 16 * 1024;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;\n\n  // the minimum number of bytes to buffer before emitting 'readable'\n  // default to pushing everything out as fast as possible.\n  this.lowWaterMark = options.lowWaterMark || 0;\n\n  // cast to ints.\n  this.bufferSize = ~~this.bufferSize;\n  this.lowWaterMark = ~~this.lowWaterMark;\n  this.highWaterMark = ~~this.highWaterMark;\n\n  if (this.lowWaterMark > this.highWaterMark)\n    throw new Error('lowWaterMark cannot be higher than highWaterMark');\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = false;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n  this.sync = false;\n  this.onread = function(er, data) {\n    onread(stream, er, data);\n  };\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n  this.pipeChunkSize = null;\n\n  this.decoder = null;\n  if (options.encoding) {\n    if (!StringDecoder)\n      StringDecoder = require('string_decoder').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n  }\n}\n\nfunction Readable(options) {\n  if (!(this instanceof Readable))\n    return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function(chunk) {\n  var rs = this._readableState;\n  rs.onread(null, chunk);\n\n  // if it's past the high water mark, we can push in some more.\n  // Also, if it's still within the lowWaterMark, we can stand some\n  // more bytes.  This is to work around cases where hwm=0 and\n  // lwm=0, such as the repl.  Also, if the push() triggered a\n  // readable event, and the user called read(largeNumber) such that\n  // needReadable was set, then we ought to push more, so that another\n  // 'readable' event will be triggered.\n  return rs.needReadable ||\n         rs.length < rs.highWaterMark ||\n         rs.length <= rs.lowWaterMark;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function(enc) {\n  if (!StringDecoder)\n    StringDecoder = require('string_decoder').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n};\n\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended)\n    return 0;\n\n  if (state.objectMode)\n    return n === 0 ? 0 : 1;\n\n  if (isNaN(n) || n === null)\n    return state.length;\n\n  if (n <= 0)\n    return 0;\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else\n      return state.length;\n  }\n\n  return n;\n}\n\n// you can override either this method, or _read(n, cb) below.\nReadable.prototype.read = function(n) {\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (typeof n !== 'number' || n > 0)\n    state.emittedReadable = false;\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0)\n      endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length - n <= state.highWaterMark)\n    doRead = true;\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading)\n    doRead = false;\n\n  if (doRead) {\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0)\n      state.needReadable = true;\n    // call internal read method\n    this._read(state.bufferSize, state.onread);\n    state.sync = false;\n  }\n\n  // If _read called its callback synchronously, then `reading`\n  // will be false, and we need to re-evaluate how much data we\n  // can return to the user.\n  if (doRead && !state.reading)\n    n = howMuchToRead(nOrig, state);\n\n  var ret;\n  if (n > 0)\n    ret = fromList(n, state);\n  else\n    ret = null;\n\n  if (ret === null || (!state.objectMode && ret.length === 0)) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended)\n    state.needReadable = true;\n\n  // If we happened to read() exactly the remaining amount in the\n  // buffer, and the EOF has been seen at this point, then make sure\n  // that we emit 'end' on the very next tick.\n  if (state.ended && !state.endEmitted && state.length === 0)\n    endReadable(this);\n\n  return ret;\n};\n\nfunction onread(stream, er, chunk) {\n  var state = stream._readableState;\n  var sync = state.sync;\n\n  // If we get something that is not a buffer, string, null, or undefined,\n  // then switch into objectMode.  Now stream chunks are all considered\n  // to be of length=1, and the watermarks determine how many objects to\n  // keep in the buffer, rather than how many bytes or characters.\n  if (!Buffer.isBuffer(chunk) &&\n      'string' !== typeof chunk &&\n      chunk !== null &&\n      chunk !== undefined) {\n    state.objectMode = true;\n    state.length = state.buffer.length;\n    state.decoder = null;\n  }\n\n  state.reading = false;\n  if (er)\n    return stream.emit('error', er);\n\n  if (chunk === null || chunk === undefined) {\n    // eof\n    state.ended = true;\n    if (state.decoder) {\n      chunk = state.decoder.end();\n      if (chunk && chunk.length) {\n        state.buffer.push(chunk);\n        state.length += state.objectMode ? 1 : chunk.length;\n      }\n    }\n\n    // if we've ended and we have some data left, then emit\n    // 'readable' now to make sure it gets picked up.\n    if (state.length > 0)\n      emitReadable(stream);\n    else\n      endReadable(stream);\n    return;\n  }\n\n  // at this point, if we got a zero-length buffer or string,\n  // and we're not in object-mode, then there's really no point\n  // continuing.  it means that there is nothing to read right\n  // now, but as we have not received the EOF-signaling null,\n  // we're not ended.  we've already unset the reading flag,\n  // so just get out of here.\n  if (!state.objectMode &&\n      (chunk || typeof chunk === 'string') &&\n      0 === chunk.length)\n    return;\n\n  if (state.decoder)\n    chunk = state.decoder.write(chunk);\n\n  // update the buffer info.\n  state.length += state.objectMode ? 1 : chunk.length;\n  state.buffer.push(chunk);\n\n  // if we haven't gotten enough to pass the lowWaterMark,\n  // and we haven't ended, then don't bother telling the user\n  // that it's time to read more data.  Otherwise, emitting 'readable'\n  // probably will trigger another stream.read(), which can trigger\n  // another _read(n,cb) before this one returns!\n  if (state.length <= state.lowWaterMark) {\n    state.reading = true;\n    stream._read(state.bufferSize, state.onread);\n    return;\n  }\n\n  // Don't emit readable right away in sync mode, because this can trigger\n  // another read() call => stack overflow.  This way, it might trigger\n  // a nextTick recursion warning, but that's not so bad.\n  if (state.needReadable) {\n    if (!sync)\n      emitReadable(stream);\n    else\n      process.nextTick(function() {\n        emitReadable(stream);\n      });\n  }\n}\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (state.emittedReadable)\n    return;\n\n  state.emittedReadable = true;\n  stream.emit('readable');\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function(n, cb) {\n  process.nextTick(function() {\n    cb(new Error('not implemented'));\n  });\n};\n\nReadable.prototype.pipe = function(dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n\n  if ((!pipeOpts || pipeOpts.end !== false) &&\n      dest !== process.stdout &&\n      dest !== process.stderr) {\n    src.once('end', onend);\n  } else {\n    src.once('end', cleanup);\n  }\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    if (readable !== src) return;\n    cleanup();\n  }\n\n  if (pipeOpts && pipeOpts.chunkSize)\n    state.pipeChunkSize = pipeOpts.chunkSize;\n\n  function onend() {\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  function cleanup() {\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (!dest._writableState || dest._writableState.needDrain)\n      ondrain();\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    unpipe();\n    if (dest.listeners('error').length === 0)\n      dest.emit('error', er);\n  }\n  dest.once('error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    // the handler that waits for readable events after all\n    // the data gets sucked out in flow.\n    // This would be easier to follow with a .once() handler\n    // in flow(), but that is too slow.\n    this.on('readable', pipeOnReadable);\n\n    state.flowing = true;\n    process.nextTick(function() {\n      flow(src);\n    });\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function() {\n    var dest = this;\n    var state = src._readableState;\n    state.awaitDrain--;\n    if (state.awaitDrain === 0)\n      flow(src);\n  };\n}\n\nfunction flow(src) {\n  var state = src._readableState;\n  var chunk;\n  state.awaitDrain = 0;\n\n  function write(dest, i, list) {\n    var written = dest.write(chunk);\n    if (false === written) {\n      state.awaitDrain++;\n    }\n  }\n\n  while (state.pipesCount &&\n         null !== (chunk = src.read(state.pipeChunkSize))) {\n\n    if (state.pipesCount === 1)\n      write(state.pipes, 0, null);\n    else\n      state.pipes.forEach(write);\n\n    src.emit('data', chunk);\n\n    // if anyone needs a drain, then we have to wait for that.\n    if (state.awaitDrain > 0)\n      return;\n  }\n\n  // if every destination was unpiped, either before entering this\n  // function, or in the while loop, then stop flowing.\n  //\n  // NB: This is a pretty rare edge case.\n  if (state.pipesCount === 0) {\n    state.flowing = false;\n\n    // if there were data event listeners added, then switch to old mode.\n    if (src.listeners('data').length)\n      emitDataEvents(src);\n    return;\n  }\n\n  // at this point, no one needed a drain, so we just ran out of data\n  // on the next readable event, start it over again.\n  state.ranOut = true;\n}\n\nfunction pipeOnReadable() {\n  if (this._readableState.ranOut) {\n    this._readableState.ranOut = false;\n    flow(this);\n  }\n}\n\n\nReadable.prototype.unpipe = function(dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0)\n    return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes)\n      return this;\n\n    if (!dest)\n      dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    this.removeListener('readable', pipeOnReadable);\n    state.flowing = false;\n    if (dest)\n      dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    this.removeListener('readable', pipeOnReadable);\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++)\n      dests[i].emit('unpipe', this);\n    return this;\n  }\n\n  // try to find the right one.\n  var i = state.pipes.indexOf(dest);\n  if (i === -1)\n    return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1)\n    state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// kludge for on('data', fn) consumers.  Sad.\n// This is *not* part of the new readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.on = function(ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // https://github.com/isaacs/readable-stream/issues/16\n  // if we're already flowing, then no need to set up data events.\n  if (ev === 'data' && !this._readableState.flowing)\n    emitDataEvents(this);\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function() {\n  emitDataEvents(this);\n  this.read(0);\n  this.emit('resume');\n};\n\nReadable.prototype.pause = function() {\n  emitDataEvents(this, true);\n  this.emit('pause');\n};\n\nfunction emitDataEvents(stream, startPaused) {\n  var state = stream._readableState;\n\n  if (state.flowing) {\n    // https://github.com/isaacs/readable-stream/issues/16\n    throw new Error('Cannot switch to old mode now.');\n  }\n\n  var paused = startPaused || false;\n  var readable = false;\n\n  // convert to an old-style stream.\n  stream.readable = true;\n  stream.pipe = Stream.prototype.pipe;\n  stream.on = stream.addListener = Stream.prototype.on;\n\n  stream.on('readable', function() {\n    readable = true;\n\n    var c;\n    while (!paused && (null !== (c = stream.read())))\n      stream.emit('data', c);\n\n    if (c === null) {\n      readable = false;\n      stream._readableState.needReadable = true;\n    }\n  });\n\n  stream.pause = function() {\n    paused = true;\n    this.emit('pause');\n  };\n\n  stream.resume = function() {\n    paused = false;\n    if (readable)\n      process.nextTick(function() {\n        stream.emit('readable');\n      });\n    else\n      this.read(0);\n    this.emit('resume');\n  };\n\n  // now make it start, just in case it hadn't already.\n  stream.emit('readable');\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function(stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function() {\n    state.ended = true;\n    if (state.decoder) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length)\n        self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function(chunk) {\n    if (state.decoder)\n      chunk = state.decoder.write(chunk);\n    if (!chunk || !chunk.length)\n      return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (typeof stream[i] === 'function' &&\n        typeof this[i] === 'undefined') {\n      this[i] = function(method) { return function() {\n        return stream[method].apply(stream, arguments);\n      }}(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  events.forEach(function(ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function(n, cb) {\n    if (paused) {\n      stream.resume();\n      paused = false;\n    }\n  };\n};\n\n\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0)\n    return null;\n\n  if (length === 0)\n    ret = null;\n  else if (objectMode)\n    ret = list.shift();\n  else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode)\n      ret = list.join('');\n    else\n      ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode)\n        ret = '';\n      else\n        ret = new Buffer(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n\n        if (stringMode)\n          ret += buf.slice(0, cpy);\n        else\n          buf.copy(ret, c, 0, cpy);\n\n        if (cpy < buf.length)\n          list[0] = buf.slice(cpy);\n        else\n          list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0)\n    throw new Error('endReadable called on non-empty stream');\n\n  if (state.endEmitted)\n    return;\n  state.ended = true;\n  state.endEmitted = true;\n  process.nextTick(function() {\n    stream.readable = false;\n    stream.emit('end');\n  });\n}\n"]},"metadata":{},"sourceType":"script"}