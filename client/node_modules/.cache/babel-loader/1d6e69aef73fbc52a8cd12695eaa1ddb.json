{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/user/Desktop/React Apps/twitchClone/client/src/streams/StreamShow.js\";\nimport React from 'react';\nimport flv from 'flv';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../actions';\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params;\n    this.props.fetchStream(this.props.match.params.id);\n    flv.createPlayer({\n      type: 'flv',\n      url: `http://localhost:8000/live/${id}.flv`\n    });\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this);\n    }\n\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: this.videoRef,\n        style: {\n          width: '100%'\n        },\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/user/Desktop/React Apps/twitchClone/client/src/streams/StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","id","match","params","createPlayer","type","url","render","stream","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B;;AACA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,QAAL,gBAAgBR,KAAK,CAACS,SAAN,EAAhB;AACA;;AACDC,EAAAA,iBAAiB,GAAG;AACnB,UAAM;AAAEC,MAAAA;AAAF,QAAS,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAhC;AACA,SAAKN,KAAL,CAAWJ,WAAX,CAAuB,KAAKI,KAAL,CAAWK,KAAX,CAAiBC,MAAjB,CAAwBF,EAA/C;AACAV,IAAAA,GAAG,CAACa,YAAJ,CAAiB;AAChBC,MAAAA,IAAI,EAAE,KADU;AAEhBC,MAAAA,GAAG,EAAG,8BAA6BL,EAAG;AAFtB,KAAjB;AAIA;;AACDM,EAAAA,MAAM,GAAG;AACR,QAAI,CAAC,KAAKV,KAAL,CAAWW,MAAhB,EAAwB;AACvB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACA;;AACD,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAyB,KAAKb,KAAL,CAAWW,MAA1C;AACA,wBACC,QAAC,KAAD,CAAO,QAAP;AAAA,8BACC;AAAO,QAAA,GAAG,EAAE,KAAKV,QAAjB;AAA2B,QAAA,KAAK,EAAE;AAAEa,UAAAA,KAAK,EAAE;AAAT,SAAlC;AAAqD,QAAA,QAAQ;AAA7D;AAAA;AAAA;AAAA;AAAA,cADD,eAEC;AAAA,kBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA,cAFD,eAGC;AAAA,kBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,cAHD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAOA;;AAzBuC;;AA4BzC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC5C,SAAO;AAAEN,IAAAA,MAAM,EAAEK,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACZ,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAV,GAAP;AACA,CAFD;;AAIA,eAAeT,OAAO,CAACoB,eAAD,EAAkB;AAAEnB,EAAAA;AAAF,CAAlB,CAAP,CAA0CC,UAA1C,CAAf","sourcesContent":["import React from 'react';\nimport flv from 'flv';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../actions';\nclass StreamShow extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.videoRef = React.createRef();\n\t}\n\tcomponentDidMount() {\n\t\tconst { id } = this.props.match.params;\n\t\tthis.props.fetchStream(this.props.match.params.id);\n\t\tflv.createPlayer({\n\t\t\ttype: 'flv',\n\t\t\turl: `http://localhost:8000/live/${id}.flv`,\n\t\t});\n\t}\n\trender() {\n\t\tif (!this.props.stream) {\n\t\t\treturn <div>Loading...</div>;\n\t\t}\n\t\tconst { title, description } = this.props.stream;\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<video ref={this.videoRef} style={{ width: '100%' }} controls />\n\t\t\t\t<h1>{title}</h1>\n\t\t\t\t<h5>{description}</h5>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = (state, ownProps) => {\n\treturn { stream: state.streams[ownProps.match.params.id] };\n};\n\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);\n"]},"metadata":{},"sourceType":"module"}