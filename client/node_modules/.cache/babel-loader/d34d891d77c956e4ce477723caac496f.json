{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/user/Desktop/React Apps/twitchClone/client/src/streams/StreamForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: className,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 5\n        }, this), this.renderError(meta)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 4\n      }, this);\n    };\n\n    this.onSubmit = formValues => {\n      this.props.onSubmit(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui error message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 5\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui button primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate\n})(StreamForm);","map":{"version":3,"sources":["/Users/user/Desktop/React Apps/twitchClone/client/src/streams/StreamForm.js"],"names":["React","Field","reduxForm","StreamForm","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","form"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAWxCC,WAXwC,GAW1B,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACzC,YAAMC,SAAS,GAAI,SAAQD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAG,EAArE;AACA,0BACC;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA,gCACC;AAAA,oBAAQF;AAAR;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC,sBAAWD,KAAX;AAAkB,UAAA,YAAY,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFD,EAGE,KAAKM,WAAL,CAAiBJ,IAAjB,CAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADD;AAOA,KApBuC;;AAAA,SAsBxCK,QAtBwC,GAsB7BC,UAAU,IAAI;AACxB,WAAKC,KAAL,CAAWF,QAAX,CAAoBC,UAApB;AACA,KAxBuC;AAAA;;AACxCF,EAAAA,WAAW,CAAC;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAqB;AAC/B,QAAIA,OAAO,IAAID,KAAf,EAAsB;AACrB,0BACC;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACC;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,oBAAyBA;AAAzB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cADD;AAKA;AACD;;AAiBDM,EAAAA,MAAM,GAAG;AACR,wBACC;AACC,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKJ,QAA7B,CADX;AAEC,MAAA,SAAS,EAAC,eAFX;AAAA,8BAGC,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,QAAA,KAAK,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,cAHD,eAIC,QAAC,KAAD;AACC,QAAA,IAAI,EAAC,aADN;AAEC,QAAA,SAAS,EAAE,KAAKA,WAFjB;AAGC,QAAA,KAAK,EAAC;AAHP;AAAA;AAAA;AAAA;AAAA,cAJD,eASC;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAaA;;AAxCuC;;AA2CzC,MAAMa,QAAQ,GAAGJ,UAAU,IAAI;AAC9B,QAAMK,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACL,UAAU,CAACM,KAAhB,EAAuB;AACtBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACA;;AAED,MAAI,CAACN,UAAU,CAACO,WAAhB,EAA6B;AAC5BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACA;;AAED,SAAOF,MAAP;AACA,CAZD;;AAcA,eAAejB,SAAS,CAAC;AACxBoB,EAAAA,IAAI,EAAE,YADkB;AAExBJ,EAAAA;AAFwB,CAAD,CAAT,CAGZf,UAHY,CAAf","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamForm extends React.Component {\n\trenderError({ error, touched }) {\n\t\tif (touched && error) {\n\t\t\treturn (\n\t\t\t\t<div className='ui error message'>\n\t\t\t\t\t<div className='header'>{error}</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\trenderInput = ({ input, label, meta }) => {\n\t\tconst className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n\t\treturn (\n\t\t\t<div className={className}>\n\t\t\t\t<label>{label}</label>\n\t\t\t\t<input {...input} autoComplete='off' />\n\t\t\t\t{this.renderError(meta)}\n\t\t\t</div>\n\t\t);\n\t};\n\n\tonSubmit = formValues => {\n\t\tthis.props.onSubmit(formValues);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<form\n\t\t\t\tonSubmit={this.props.handleSubmit(this.onSubmit)}\n\t\t\t\tclassName='ui form error'>\n\t\t\t\t<Field name='title' component={this.renderInput} label='Enter Title' />\n\t\t\t\t<Field\n\t\t\t\t\tname='description'\n\t\t\t\t\tcomponent={this.renderInput}\n\t\t\t\t\tlabel='Enter Description'\n\t\t\t\t/>\n\t\t\t\t<button className='ui button primary'>Submit</button>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nconst validate = formValues => {\n\tconst errors = {};\n\n\tif (!formValues.title) {\n\t\terrors.title = 'You must enter a title';\n\t}\n\n\tif (!formValues.description) {\n\t\terrors.description = 'You must enter a description';\n\t}\n\n\treturn errors;\n};\n\nexport default reduxForm({\n\tform: 'streamForm',\n\tvalidate,\n})(StreamForm);\n"]},"metadata":{},"sourceType":"module"}