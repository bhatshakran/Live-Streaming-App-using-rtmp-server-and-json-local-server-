{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\nmodule.exports = Duplex;\n\nvar util = require('util');\n\nvar Readable = require('./_stream_readable');\n\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\nObject.keys(Writable.prototype).forEach(function (method) {\n  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n});\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  if (options && options.readable === false) this.readable = false;\n  if (options && options.writable === false) this.writable = false;\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n  this.once('end', onend);\n} // the no-half-open enforcer\n\n\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.\n  // But allow more writes to happen in this tick.\n\n  process.nextTick(this.end.bind(this));\n}","map":{"version":3,"sources":["/Users/user/Desktop/React Apps/twitchClone/client/node_modules/flv/node_modules/readable-stream/lib/_stream_duplex.js"],"names":["module","exports","Duplex","util","require","Readable","Writable","inherits","Object","keys","prototype","forEach","method","options","call","readable","writable","allowHalfOpen","once","onend","_writableState","ended","process","nextTick","end","bind"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;;AACA,IAAIC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,oBAAD,CAAtB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,oBAAD,CAAtB;;AAEAD,IAAI,CAACI,QAAL,CAAcL,MAAd,EAAsBG,QAAtB;AAEAG,MAAM,CAACC,IAAP,CAAYH,QAAQ,CAACI,SAArB,EAAgCC,OAAhC,CAAwC,UAASC,MAAT,EAAiB;AACvD,MAAI,CAACV,MAAM,CAACQ,SAAP,CAAiBE,MAAjB,CAAL,EACEV,MAAM,CAACQ,SAAP,CAAiBE,MAAjB,IAA2BN,QAAQ,CAACI,SAAT,CAAmBE,MAAnB,CAA3B;AACH,CAHD;;AAKA,SAASV,MAAT,CAAgBW,OAAhB,EAAyB;AACvB,MAAI,EAAE,gBAAgBX,MAAlB,CAAJ,EACE,OAAO,IAAIA,MAAJ,CAAWW,OAAX,CAAP;AAEFR,EAAAA,QAAQ,CAACS,IAAT,CAAc,IAAd,EAAoBD,OAApB;AACAP,EAAAA,QAAQ,CAACQ,IAAT,CAAc,IAAd,EAAoBD,OAApB;AAEA,MAAIA,OAAO,IAAIA,OAAO,CAACE,QAAR,KAAqB,KAApC,EACE,KAAKA,QAAL,GAAgB,KAAhB;AAEF,MAAIF,OAAO,IAAIA,OAAO,CAACG,QAAR,KAAqB,KAApC,EACE,KAAKA,QAAL,GAAgB,KAAhB;AAEF,OAAKC,aAAL,GAAqB,IAArB;AACA,MAAIJ,OAAO,IAAIA,OAAO,CAACI,aAAR,KAA0B,KAAzC,EACE,KAAKA,aAAL,GAAqB,KAArB;AAEF,OAAKC,IAAL,CAAU,KAAV,EAAiBC,KAAjB;AACD,C,CAED;;;AACA,SAASA,KAAT,GAAiB;AACf;AACA;AACA,MAAI,KAAKF,aAAL,IAAsB,KAAKG,cAAL,CAAoBC,KAA9C,EACE,OAJa,CAMf;AACA;;AACAC,EAAAA,OAAO,CAACC,QAAR,CAAiB,KAAKC,GAAL,CAASC,IAAT,CAAc,IAAd,CAAjB;AACD","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\nmodule.exports = Duplex;\nvar util = require('util');\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nObject.keys(Writable.prototype).forEach(function(method) {\n  if (!Duplex.prototype[method])\n    Duplex.prototype[method] = Writable.prototype[method];\n});\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex))\n    return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false)\n    this.readable = false;\n\n  if (options && options.writable === false)\n    this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false)\n    this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended)\n    return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  process.nextTick(this.end.bind(this));\n}\n"]},"metadata":{},"sourceType":"script"}